#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/mouse_settings.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors/mouse_setting.dtsi>

#define SLSH   &hold_tap QMARK SLASH

  // Only apply these settings on the side that has the TP connected
  // (usually the right side)


   #define PS2_MOUSE_SAMPLING_RATE 100

   /*
    * Input Accelerator Config
    */

    / {
        input_accelerator_move: input_accelerator_move {
          status = "okay";
          compatible = "zmk,input-accelerator";

          acceleration-curve = "sigmoid";
          acceleration-factor-base = <80>;
          acceleration-factor-max = <130>;
          acceleration-factor-rate = <40>;
          acceleration-start-offset = <5>;
          max-speed = <50>;

          enable-interval-based-speed;
          input-default-sending-rate = <PS2_MOUSE_SAMPLING_RATE>;
        };

        input_accelerator_scroll: input_accelerator_scroll {
          status = "okay";
          compatible = "zmk,input-accelerator";

          acceleration-curve = "scroll";
          acceleration-factor-rate = <25>;
          acceleration-start-offset = <10>;
          max-speed = <20>;
          divisor = <20>;

          enable-interval-based-speed;
          input-default-sending-rate = <PS2_MOUSE_SAMPLING_RATE>;
        };
    };



   /*
    * Input Listener Config
    */

    &mouse_ps2_input_listener { 
       move-accelerator = <&input_accelerator_move>; 
       scroll-accelerator = <&input_accelerator_scroll>; 
       scroll-layers = <1>; 
       //scroll-layers-reverse-direction-horizontal; 
       scroll-layers-reverse-direction-vertical; 
        xy-swap; 
       // x-invert; 
       // y-invert; 
       // Set the layer that should automatically activate when the mouse is 
       // moving. 
       //layer-toggle = <1>; 
       // How long the mouse needs to move for before the layer is activated (to 
       // avoid accidental activations while typing) (Default: 250) 
       //layer-toggle-delay-ms = <250>; 
       // How long to wait, after the last mouse movement, before deactivating 
       // the layer (Default: 250) 
       //layer-toggle-timeout-ms = <250>; 
       // Require at least this amount of time since the last key tap to 
       // activate the layer toggle. Prevents activations of the mouse layer 
       // when you accidentally touch the TrackPoint while typing 
       //layer-toggle-require-prior-idle-ms = <200>; 
      
    };


   /*
    * Mouse Driver Settings
    */

    &mouse_ps2 {

      // How sensitive the TP is (Default: 128)
       tp-sensitivity = <256>;


      // The maximum mouse movement speed the TP will accelarate to
      // (Default: 97)
       tp-val6-upper-speed = <194>;


      // Negative Inertia (Default: 6)
      // Makes the TP feel more responsive and "overshoot" less.
      // tp-neg-inertia = <6>;


      // Enable clicking by tapping on the TP.
      // Not all TPs support this.
      // tp-press-to-select;
      // tp-press-to-select-threshold = <10>;


      // Adjust axis settings on the TP
      // Works only on some trackpoints, but may be properly considered by the
      // trackpoint's acceleration features (which may or may not have an
      // impact).
      //
      // Alternatively consider achieving the same effect using the
      //  `input-listener` settings below.
      // tp-xy-swap;
      // tp-x-invert;
      // tp-y-invert;


      // Set sampling rate
      //
      // The frequency at which the mouse samples and sends data (in hz).
      // The default rate is 100. You can try lowering it if you experience
      // connection errors.
      //
      // Higher values than 100 are no improvement in my experience, but will
      // increase battery life and potentially errors in transmissions.
      //
      // These values are allowed: 10,20,40,60,80,100,200
      // sampling-rate = <60>;


      // Disables clicking.
      // Useful when using the PS2 GPIO driver that is prone to
      // erros in transmissions to reduce accidental clicks.
      // disable-clicking;


      // Enable scroll wheel
      // For mouse devices supporting the Intellimouse extension. Not relevant
      // for trackpoints
      // scroll-mode;

    };

    // Enable PS/2 Mouse Devices
    // In `your_keyboard_right.overlay` all devices have `status = "disabled"`.
    // So,they are never compiled into the firmware.
    //
    // Here we enable them, but we do it within the #ifdef HAS_MOUSE_TP code
    // block, which prevents compilation and potential build errors when we
    // undefine HAS_MOUSE_TP in corne_tp.keymap
    &mouse_ps2  {
      status = "okay";
    };

    &mouse_ps2_input_listener {
      status = "okay";
    };



      &uart0 {
        status = "okay";
      };

      &uart_ps2 {
        status="okay";
      };

#define PS2_MOUSE_SAMPLING_RATE 100
 /* * Input Accelerator Config */ 
 / { 
      input_accelerator_move: input_accelerator_move { 
           status = "okay"; 
           compatible = "zmk,input-accelerator"; 
           acceleration-curve = "sigmoid"; 
           acceleration-factor-base = <10>;//60 
           acceleration-factor-max = <130>;//120 
           acceleration-factor-rate = <40>; 
           acceleration-start-offset = <0>;//7 
           max-speed = <500>;//50
           enable-interval-based-speed; 
           input-default-sending-rate = <PS2_MOUSE_SAMPLING_RATE>; 
      }; 
      input_accelerator_scroll: input_accelerator_scroll { 
           status = "okay"; 
           compatible = "zmk,input-accelerator"; 
           acceleration-curve = "scroll"; 
           acceleration-factor-rate = <25>;//20 
           acceleration-start-offset = <10>; 
           max-speed = <100>;//20 
           divisor = <20>; 
           enable-interval-based-speed; 
           input-default-sending-rate = <PS2_MOUSE_SAMPLING_RATE>; 
           };
  }; 

//tap dance tap dance tap dance tap dance ctap dance tap dance tap dance tap dance tap dance tap dance tap dance tap dance tap dance tap dance tap dance 

/ {
    behaviors {
        tdltb: tap_dance_ltb {                                 //left tab
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&hold_tap LA(LEFT) LS(COMMA)>, <&kp LC(LS(TAB))>;
        };
        tdrtb: tap_dance_rtb {                                 //right tab
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&hold_tap LA(RIGHT) LS(DOT)>, <&kp LC(TAB)>;
        };
        tdmck: tap_dance_mck {                                 //mclick
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&hold_tap_clk 1 MCLK>, <&kp LC(LS(T))>;
        };
        tdrck: tap_dance_rck {                                 //rclick
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&hold_tap_clk 1 RCLK>, <&kp LC(W)>;
        };

    };
};

//custom hold tap custom hold tap custom hold tap custom hold tap custom hold tap custom hold tap custom hold tap custom hold tap custom hold tap

/ {
behaviors {
  hold_tap: hold_tap {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    tapping-term-ms = <300>;
    quick-tap-ms = <0>;
    bindings = <&kp>, <&kp>;
  };
  hold_tap_clk: hold_tap_clk {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    tapping-term-ms = <300>;
    quick-tap-ms = <0>;
    bindings = <&mo>, <&mkp>;
  };

 };
};

//mod morph mod morph mod morph mod morph mod morph mod morph mod morph mod morph mod morph mod morph mod morph mod morph mod morph mod morph mod
//normal, with mod

/ {
    behaviors {
        slsh: slsh {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <SLSH>, <&slshm>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        }; 
      
    };
};

//macros macros macros macros macros macros macros macros macros macros macros macros macros macros macros macros macros macros macros macros macros 

/ {
macros {

    copysp: copysp {
        label = "copysp";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTRL>, 
              <&macro_tap &kp C &kp L &kp V &kp A &kp C>,
              <&macro_release &kp LCTRL>;
    };

    slshm: slshm {
        label = "slshm";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp SLASH>;
    };      

  };
};

//combos combos combos combos combos combos combos combos combos combos combos combos combos combos combos combos combos combos combos combos combos 

/ {
    combos {
        compatible = "zmk,combos";

        combo_pgdn {
            timeout-ms = <175>;
            key-positions = <4 5>;
            bindings = <&kp PG_DN>;
        };
        combo_esc {
            timeout-ms = <175>;
            key-positions = <5 6>;
            bindings = <&kp ESC>;
        };
        combo_pgup {
            timeout-ms = <175>;
            key-positions = <6 7>;
            bindings = <&kp PG_UP>;
        };
        combo_reset {
            timeout-ms = <175>;
            key-positions = <4 7>;
            bindings = <&bootloader>;
        }; 
        combo_mute {
            timeout-ms = <175>;
            key-positions = <1 2>;
            bindings = <&kp PSCRN>;
        };  

    };
};

//keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap 

/ {

    keymap {
        compatible = "zmk,keymap";

        0 {
            bindings = <
                                        &tdltb       &hold_tap LC(V) LC(C)   &tdrtb       &kp BSPC
                                        &copysp      &tdmck                  &tdrck       &kp ENTER
              &mkp LCLK    &tdmck       &tog 3                                       
            >;
        };

        1 {
            bindings = <
                                        &trans       &kp C_VOL_DN            &kp C_VOL_UP  &trans
                                        &kp LEFT     &kp DOWN                &kp UP        &kp RIGHT
              &trans       &trans       &trans                                       
            >;
        };

        2 {
            bindings = <
                                        &out OUT_BLE            &out OUT_USB       &trans         &trans
                                        &bt BT_CLR              &bt BT_SEL 1       &bt BT_SEL 2   &bt BT_SEL 3
              &trans       &trans       &trans                                       
            >;
        };

        3 {
            bindings = <
                                        &kp LCTRL                  &mmv MOVE_UP       &trans            &msc SCRL_UP
                                        &mmv MOVE_LEFT          &mmv MOVE_DOWN     &mmv MOVE_RIGHT   &msc SCRL_DOWN
              &kp LSFT     &slsh        &trans                                       
            >;
        };        

    };
};

 